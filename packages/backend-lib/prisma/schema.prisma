// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                     String                   @id() @default(uuid()) @db.Uuid
  name                   String
  domain                 String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Segment                Segment[]
  Journey                Journey[]
  UserProperty           UserProperty[]
  EmailProvider          EmailProvider[]
  DefaultEmailProvider   DefaultEmailProvider?
  EmailTemplate          EmailTemplate[]
  SegmentIOConfiguration SegmentIOConfiguration?
  UserPropertyAssignment UserPropertyAssignment[]
  SegmentAssignment      SegmentAssignment[]
  Broadcast              Broadcast[]
  SubscriptionGroup      SubscriptionGroup[]
  WorkspaceMemberRole    WorkspaceMemberRole[]
  Secret                 Secret[]
  WriteKey               WriteKey[]
  MessageTemplate        MessageTemplate[]
  OauthToken             OauthToken[]
  Integration            Integration[]
  DefaultSmsProvider     DefaultSmsProvider?
  SmsProvider            SmsProvider[]
  ComputedPropertyPeriod ComputedPropertyPeriod[]
  Feature                Feature[]
  WorkspaceMember        WorkspaceMember[]
  AdminApiKey            AdminApiKey[]

  @@unique([name])
}

enum DBResourceType {
  Declarative // For Declarative Configurable Resources
  Internal // For Internal Dynamic Resources
}

enum SegmentStatus {
  NotStarted
  Running
  Paused
}

model Segment {
  id                  String              @id() @default(uuid()) @db.Uuid
  workspace           Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String              @db.Uuid
  resourceType        DBResourceType      @default(Declarative)
  name                String
  definition          Json
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  definitionUpdatedAt DateTime            @default(now())
  status              SegmentStatus       @default(Running)
  subscriptionGroupId String?             @db.Uuid
  subscriptionGroup   SubscriptionGroup?  @relation(fields: [subscriptionGroupId], references: [id], onDelete: SetNull)
  SegmentAssignment   SegmentAssignment[]
  Broadcast           Broadcast[]

  @@unique([workspaceId, name])
  @@index([resourceType])
}

enum JourneyStatus {
  NotStarted
  Running
  Paused
  Broadcast
}

model Journey {
  id               String             @id() @default(uuid()) @db.Uuid
  workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String             @db.Uuid
  name             String
  status           JourneyStatus      @default(NotStarted)
  definition       Json
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  resourceType     DBResourceType     @default(Declarative)
  canRunMultiple   Boolean            @default(false)
  UserJourneyEvent UserJourneyEvent[]
  Broadcast        Broadcast[]

  @@unique([workspaceId, name])
}

enum DBCompletionStatus {
  NotStarted
  InProgress
  Successful
  Failed
}

enum DBBroadcastStatus {
  NotStarted
  InProgress
  Triggered
}

model Broadcast {
  id                String            @id() @default(uuid()) @db.Uuid
  workspace         Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId       String            @db.Uuid
  segment           Segment?          @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  segmentId         String?           @db.Uuid
  journey           Journey?          @relation(fields: [journeyId], references: [id], onDelete: SetNull)
  journeyId         String?           @db.Uuid
  messageTemplate   MessageTemplate?  @relation(fields: [messageTemplateId], references: [id], onDelete: SetNull)
  messageTemplateId String?           @db.Uuid
  name              String
  status            DBBroadcastStatus @default(NotStarted)
  triggeredAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([workspaceId, name])
}

model UserProperty {
  id                     String                   @id() @default(uuid()) @db.Uuid
  workspace              Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId            String                   @db.Uuid
  name                   String
  resourceType           DBResourceType           @default(Declarative)
  definition             Json
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  definitionUpdatedAt    DateTime                 @default(now())
  exampleValue           String?
  UserPropertyAssignment UserPropertyAssignment[]

  @@unique([workspaceId, name])
}

model SegmentAssignment {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  userId      String
  segment     Segment   @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId   String    @db.Uuid
  inSegment   Boolean

  @@unique([workspaceId, userId, segmentId])
}

model UserPropertyAssignment {
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String       @db.Uuid
  userId         String
  userProperty   UserProperty @relation(fields: [userPropertyId], references: [id], onDelete: Cascade)
  userPropertyId String       @db.Uuid
  value          String

  @@unique([workspaceId, userPropertyId, userId])
  @@index([userId])
}

// TODO consolidate with generic MessageTemplate
model EmailTemplate {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  name        String
  from        String
  subject     String
  body        String
  replyTo     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MessageTemplate {
  id           String         @id() @default(uuid()) @db.Uuid
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String         @db.Uuid
  name         String
  draft        Json?
  resourceType DBResourceType @default(Declarative)
  definition   Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Broadcast    Broadcast[]

  @@unique([workspaceId, name])
}

model DefaultEmailProvider {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid

  emailProvider   EmailProvider @relation(fields: [emailProviderId], references: [id], onDelete: Cascade)
  emailProviderId String        @db.Uuid
  fromAddress     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([workspaceId])
}

model DefaultSmsProvider {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid

  smsProvider   SmsProvider @relation(fields: [smsProviderId], references: [id], onDelete: Cascade)
  smsProviderId String      @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workspaceId])
}

model EmailProvider {
  id                   String                 @id() @default(uuid()) @db.Uuid
  workspace            Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId          String                 @db.Uuid
  type                 String
  apiKey               String?
  secretId             String?                @db.Uuid
  secret               Secret?                @relation(fields: [secretId], references: [id], onDelete: Cascade)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  DefaultEmailProvider DefaultEmailProvider[]

  @@unique([workspaceId, type])
}

model SmsProvider {
  id                 String               @id() @default(uuid()) @db.Uuid
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId        String               @db.Uuid
  secretId           String               @db.Uuid
  secret             Secret               @relation(fields: [secretId], references: [id], onDelete: Cascade)
  type               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  DefaultSmsProvider DefaultSmsProvider[]

  @@unique([workspaceId, type])
}

model SegmentIOConfiguration {
  id           String    @id() @default(uuid()) @db.Uuid
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String    @db.Uuid
  sharedSecret String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId])
}

// TODO add workspace id
model UserJourneyEvent {
  id               String   @id() @default(uuid()) @db.Uuid
  userId           String
  nodeId           String?
  journeyId        String?  @db.Uuid()
  journey          Journey? @relation(fields: [journeyId], references: [id], onDelete: SetNull)
  type             String
  eventKey         String?
  journeyStartedAt DateTime
  createdAt        DateTime @default(now())

  @@unique([journeyId, userId, eventKey, type, journeyStartedAt, nodeId])
}

enum DBSubscriptionGroupType {
  OptIn
  OptOut
}

enum DBChannelType {
  Email
  MobilePush
  Sms
}

model SubscriptionGroup {
  id          String                  @id() @default(uuid()) @db.Uuid
  workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String                  @db.Uuid
  name        String
  channel     DBChannelType
  type        DBSubscriptionGroupType
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  Segment     Segment[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model WorkspaceMember {
  id            String  @id() @default(uuid()) @db.Uuid
  email         String? @unique
  emailVerified Boolean @default(false)
  image         String?
  name          String?
  nickname      String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  lastWorkspaceId       String?                 @db.Uuid
  lastWorkspace         Workspace?              @relation(fields: [lastWorkspaceId], references: [id], onDelete: SetNull)
  WorkspaceMemberRole   WorkspaceMemberRole[]
  WorkspaceMembeAccount WorkspaceMembeAccount[]
}

model WorkspaceMembeAccount {
  id String @id() @default(uuid()) @db.Uuid

  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  workspaceMemberId String          @db.Uuid

  provider          String
  providerAccountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

enum DBRoleType {
  Admin
  WorkspaceManager
  Author
  Viewer
}

model WorkspaceMemberRole {
  workspace         Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String          @db.Uuid
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  workspaceMemberId String          @db.Uuid
  role              DBRoleType      @default(Viewer)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([workspaceId, workspaceMemberId])
}

model Secret {
  id            String          @id() @default(uuid()) @db.Uuid
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String          @db.Uuid
  name          String
  value         String?
  configValue   Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  WriteKey      WriteKey[]
  SmsProvider   SmsProvider[]
  EmailProvider EmailProvider[]
  AdminApiKey   AdminApiKey[]

  @@unique([workspaceId, name])
}

model WriteKey {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  secret      Secret    @relation(fields: [secretId], references: [id], onDelete: Cascade)
  secretId    String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, secretId])
}

model OauthToken {
  id           String    @id() @default(uuid()) @db.Uuid
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String    @db.Uuid
  name         String
  refreshToken String
  accessToken  String
  expiresIn    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId, name])
}

model Integration {
  id                  String    @id() @default(uuid()) @db.Uuid
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String    @db.Uuid
  name                String
  definition          Json
  enabled             Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  definitionUpdatedAt DateTime  @default(now())

  @@unique([workspaceId, name])
}

enum ComputedPropertyType {
  Segment
  UserProperty
}

model ComputedPropertyPeriod {
  id                 String               @id() @default(uuid()) @db.Uuid
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId        String               @db.Uuid
  type               ComputedPropertyType
  computedPropertyId String               @db.Uuid
  version            String
  from               DateTime?
  to                 DateTime
  step               String
  createdAt          DateTime             @default(now())

  @@index([workspaceId, type, computedPropertyId, to])
}

model Feature {
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  enabled     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, name])
}

model AdminApiKey {
  id          String    @id() @default(uuid()) @db.Uuid
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  secretId    String    @db.Uuid
  secret      Secret    @relation(fields: [secretId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, name])
}
